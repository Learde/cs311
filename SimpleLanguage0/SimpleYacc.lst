
// ==========================================================================
//  GPPG error listing for yacc source file <SimpleYacc.y>
// ==========================================================================
//  Version:  1.3.6
//  Machine:  LEARDEPC
//  DateTime: 16.02.2024 21:33:24
//  UserName: learde
// ==========================================================================


%{
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public Parser(AbstractScanner<int, LexLocation> scanner) : base(scanner) { }
%}

%output = SimpleYacc.cs

%namespace SimpleParser

%token SET SUB RETURN IF ELSE WHILE END ID STRING CHAR PLUS MINUS NOT ADDRESS OR AND MOD DIV MULT DIVISION STREAM IS LT GT LEQ GEQ NEQ INUM ECHO ASSIGN RIGHT_BRACKET LEFT_BRACKET COMMA LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET

%%
// Error: NonTerminal symbol "NEW_LINE" has no productions
// Error: NonTerminal symbol "LINE_BREAK" has no productions
// Warning: Terminating LINE_BREAK fixes the following size-1 NonTerminal set
   // {LINE_BREAK}
// Error: There are 2 non-terminating NonTerminal Symbols
   //  {NEW_LINE, LINE_BREAK}
// Warning: Terminating NEW_LINE fixes the following size-1 NonTerminal set
   // {NEW_LINE}
// --------------------------------------------------------------------------

program		: operlist
			;

subprog		: suboperlist
			;

operlist	: oper
			| operlist NEW_LINE oper
			;

suboperlist	: oper
			| operlist LINE_BREAK oper
			;

oper		: assignment
			| subroutine
			| exprlist
			| statement
			;

assignment	: SET ID ASSIGN exprlist
			| SET ID ASSIGN arr
			;

arr			: LEFT_BRACKET RIGHT_BRACKET
			| LEFT_BRACKET arrlist RIGHT_BRACKET
			;

arrlist		: expr
			| arrlist COMMA expr
			;

exprlist	: expr
			| exprlist binop expr
			;

binop		: PLUS
			| MINUS
			| OR
			| AND
			| MOD
			| DIV
			| MULT
			| DIVISION
			| STREAM
			| IS
			| LT
			| GT
			| LEQ
			| GEQ
			| NEQ
			| ADDRESS
			;

expr		: call
			| unop
			| const
			| func
			;

call		: ID LEFT_BRACKET paramlist RIGHT_BRACKET
			| ID LEFT_BRACKET RIGHT_BRACKET
			;

paramlist	: exprlist
			| paramlist COMMA exprlist
			;

unop		: PLUS exprlist
			| MINUS exprlist
			| ADDRESS exprlist
			| NOT exprlist
			;

const		: STRING
			| CHAR
			| INUM
			;

func		: ECHO
			;

subroutine	: SUB ID subprog END SUB
			;

statement	: ifst
			| whilest
			| returnst
			;

ifst		: IF LEFT_SQUARE_BRACKET exprlist RIGHT_SQUARE_BRACKET subprog END IF
			| IF LEFT_SQUARE_BRACKET exprlist RIGHT_SQUARE_BRACKET subprog ELSE subprog END IF
			;

whilest		: WHILE LEFT_SQUARE_BRACKET exprlist RIGHT_SQUARE_BRACKET subprog END WHILE
			;

returnst	: exprlist
			;

%%
// ==========================================================================

